type token =
  | LAMBDA
  | TRUE
  | FALSE
  | IF
  | THEN
  | ELSE
  | SUCC
  | PRED
  | ISZERO
  | LET
  | LETREC
  | IN
  | CONCAT
  | BOOL
  | NAT
  | STRING
  | QUIT
  | HEAD
  | TAIL
  | ISNIL
  | CONS
  | NIL
  | LIST
  | LBRACKET
  | RBRACKET
  | LPAREN
  | RPAREN
  | DOT
  | EQ
  | COLON
  | ARROW
  | COMMA
  | LCBRACKET
  | RCBRACKET
  | AS
  | CASE
  | OF
  | LT
  | GT
  | BAR
  | EQGT
  | SEMICOLON
  | EOF
  | INTV of (int)
  | IDV of (string)
  | STRINGV of (string)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Lambda;;
# 54 "parser.ml"
let yytransl_const = [|
  257 (* LAMBDA *);
  258 (* TRUE *);
  259 (* FALSE *);
  260 (* IF *);
  261 (* THEN *);
  262 (* ELSE *);
  263 (* SUCC *);
  264 (* PRED *);
  265 (* ISZERO *);
  266 (* LET *);
  267 (* LETREC *);
  268 (* IN *);
  269 (* CONCAT *);
  270 (* BOOL *);
  271 (* NAT *);
  272 (* STRING *);
  273 (* QUIT *);
  274 (* HEAD *);
  275 (* TAIL *);
  276 (* ISNIL *);
  277 (* CONS *);
  278 (* NIL *);
  279 (* LIST *);
  280 (* LBRACKET *);
  281 (* RBRACKET *);
  282 (* LPAREN *);
  283 (* RPAREN *);
  284 (* DOT *);
  285 (* EQ *);
  286 (* COLON *);
  287 (* ARROW *);
  288 (* COMMA *);
  289 (* LCBRACKET *);
  290 (* RCBRACKET *);
  291 (* AS *);
  292 (* CASE *);
  293 (* OF *);
  294 (* LT *);
  295 (* GT *);
  296 (* BAR *);
  297 (* EQGT *);
  298 (* SEMICOLON *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  299 (* INTV *);
  300 (* IDV *);
  301 (* STRINGV *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\002\000\002\000\002\000\002\000\
\002\000\002\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\007\000\007\000\007\000\007\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\008\000\008\000\009\000\009\000\005\000\005\000\
\011\000\003\000\003\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\010\000\010\000\014\000\014\000\
\013\000\013\000\015\000\000\000"

let yylen = "\002\000\
\004\000\004\000\002\000\002\000\001\000\006\000\006\000\006\000\
\008\000\004\000\002\000\002\000\002\000\002\000\003\000\005\000\
\005\000\005\000\001\000\001\000\003\000\003\000\003\000\003\000\
\003\000\001\000\001\000\001\000\001\000\001\000\003\000\001\000\
\003\000\007\000\001\000\003\000\006\000\004\000\001\000\003\000\
\007\000\001\000\003\000\003\000\001\000\001\000\001\000\004\000\
\003\000\001\000\002\000\003\000\003\000\005\000\003\000\005\000\
\001\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\026\000\027\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\029\000\000\000\
\030\000\060\000\000\000\000\000\000\000\000\000\032\000\000\000\
\028\000\000\000\012\000\013\000\014\000\000\000\000\000\000\000\
\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\003\000\011\000\
\000\000\000\000\000\000\000\000\000\000\000\000\015\000\045\000\
\046\000\047\000\000\000\000\000\000\000\000\000\050\000\000\000\
\000\000\000\000\000\000\000\000\000\000\025\000\000\000\000\000\
\031\000\033\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\021\000\023\000\022\000\024\000\000\000\000\000\
\000\000\000\000\000\000\000\000\051\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\038\000\
\000\000\036\000\000\000\010\000\000\000\000\000\000\000\000\000\
\001\000\002\000\000\000\000\000\000\000\000\000\000\000\044\000\
\000\000\052\000\000\000\049\000\000\000\016\000\043\000\017\000\
\018\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\
\006\000\008\000\000\000\048\000\000\000\059\000\058\000\037\000\
\000\000\054\000\000\000\040\000\000\000\000\000\000\000\000\000\
\034\000\009\000\056\000\000\000\000\000\041\000"

let yydgoto = "\002\000\
\026\000\049\000\100\000\028\000\116\000\029\000\030\000\050\000\
\031\000\051\000\117\000\073\000\105\000\103\000\106\000"

let yysindex = "\255\255\
\057\255\000\000\219\254\000\000\000\000\201\000\008\255\008\255\
\008\255\227\254\234\254\008\255\024\000\011\255\016\255\018\255\
\019\255\020\255\201\000\246\000\201\000\244\254\000\000\021\255\
\000\000\000\000\047\000\008\255\026\255\027\255\000\000\039\255\
\000\000\043\255\000\000\000\000\000\000\028\255\041\255\008\255\
\000\000\096\255\096\255\096\255\096\255\096\255\022\255\042\255\
\048\255\050\255\051\255\054\255\059\255\155\255\000\000\000\000\
\226\254\239\254\096\255\201\000\201\000\096\255\000\000\000\000\
\000\000\000\000\068\255\096\255\224\254\052\255\000\000\069\255\
\066\255\073\255\074\255\084\255\088\255\000\000\201\000\201\000\
\000\000\000\000\076\255\201\000\155\255\200\255\072\255\000\000\
\118\000\120\000\000\000\000\000\000\000\000\000\093\255\117\255\
\112\255\101\255\096\255\105\255\000\000\103\255\102\255\107\255\
\099\255\109\255\008\255\096\255\008\255\008\255\008\255\000\000\
\111\255\000\000\095\255\000\000\104\255\108\255\116\255\009\255\
\000\000\000\000\201\000\201\000\201\000\201\000\123\255\000\000\
\096\255\000\000\096\255\000\000\052\255\000\000\000\000\000\000\
\000\000\008\255\106\255\120\255\076\255\118\255\155\255\000\000\
\000\000\000\000\139\255\000\000\122\255\000\000\000\000\000\000\
\042\255\000\000\128\255\000\000\096\255\201\000\135\255\113\255\
\000\000\000\000\000\000\114\255\201\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\000\
\000\000\000\000\000\000\161\000\045\000\089\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\001\
\146\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\115\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\143\255\000\000\000\000\000\000\000\000\000\000\000\000\
\149\255\000\000\000\000\000\000\031\000\000\000\015\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\150\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\002\000\230\255\000\000\044\000\253\255\000\000\106\000\
\000\000\048\000\000\000\000\000\056\000\033\000\000\000"

let yytablesize = 572
let yytable = "\001\000\
\042\000\101\000\027\000\035\000\036\000\037\000\032\000\034\000\
\040\000\004\000\005\000\102\000\091\000\092\000\038\000\072\000\
\074\000\075\000\076\000\077\000\047\000\039\000\052\000\041\000\
\056\000\093\000\094\000\090\000\017\000\018\000\039\000\053\000\
\095\000\019\000\042\000\098\000\063\000\084\000\131\000\043\000\
\020\000\044\000\045\000\046\000\020\000\022\000\055\000\060\000\
\078\000\054\000\023\000\033\000\025\000\057\000\058\000\089\000\
\061\000\003\000\004\000\005\000\006\000\096\000\097\000\007\000\
\008\000\009\000\010\000\011\000\059\000\012\000\062\000\079\000\
\127\000\013\000\014\000\015\000\016\000\017\000\018\000\080\000\
\113\000\135\000\019\000\081\000\082\000\118\000\047\000\084\000\
\019\000\020\000\083\000\099\000\021\000\107\000\022\000\104\000\
\108\000\109\000\110\000\023\000\024\000\025\000\149\000\134\000\
\150\000\136\000\137\000\138\000\111\000\064\000\065\000\066\000\
\112\000\115\000\028\000\120\000\149\000\121\000\067\000\122\000\
\123\000\068\000\124\000\125\000\144\000\145\000\146\000\147\000\
\069\000\126\000\161\000\128\000\129\000\070\000\152\000\130\000\
\131\000\132\000\140\000\071\000\133\000\028\000\139\000\141\000\
\113\000\143\000\142\000\148\000\155\000\153\000\158\000\164\000\
\157\000\159\000\165\000\003\000\004\000\005\000\006\000\162\000\
\005\000\007\000\008\000\009\000\010\000\011\000\166\000\012\000\
\064\000\065\000\066\000\160\000\014\000\015\000\016\000\017\000\
\018\000\067\000\102\000\035\000\085\000\057\000\053\000\055\000\
\156\000\114\000\154\000\086\000\151\000\000\000\021\000\163\000\
\087\000\000\000\000\000\000\000\000\000\023\000\088\000\025\000\
\003\000\004\000\005\000\006\000\000\000\000\000\007\000\008\000\
\009\000\010\000\011\000\000\000\012\000\000\000\000\000\000\000\
\000\000\014\000\015\000\016\000\017\000\018\000\000\000\000\000\
\000\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\020\000\101\000\000\000\021\000\000\000\022\000\000\000\000\000\
\000\000\000\000\023\000\119\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\042\000\042\000\000\000\042\000\042\000\000\000\
\000\000\000\000\000\000\000\000\042\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\042\000\000\000\
\000\000\042\000\042\000\042\000\042\000\042\000\000\000\000\000\
\042\000\042\000\042\000\039\000\039\000\042\000\042\000\042\000\
\042\000\000\000\039\000\042\000\042\000\042\000\020\000\020\000\
\000\000\020\000\020\000\000\000\000\000\000\000\000\000\000\000\
\020\000\039\000\000\000\000\000\000\000\000\000\039\000\000\000\
\039\000\020\000\020\000\039\000\000\000\039\000\020\000\020\000\
\000\000\000\000\000\000\000\000\020\000\020\000\020\000\000\000\
\000\000\020\000\020\000\020\000\020\000\000\000\000\000\020\000\
\020\000\020\000\019\000\019\000\000\000\019\000\019\000\000\000\
\000\000\000\000\000\000\000\000\019\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\019\000\019\000\000\000\
\000\000\000\000\019\000\019\000\028\000\028\000\000\000\000\000\
\019\000\019\000\019\000\000\000\000\000\019\000\019\000\019\000\
\019\000\000\000\000\000\019\000\019\000\019\000\000\000\028\000\
\028\000\000\000\000\000\000\000\028\000\028\000\028\000\028\000\
\028\000\050\000\028\000\028\000\028\000\000\000\000\000\000\000\
\028\000\000\000\000\000\000\000\000\000\028\000\028\000\028\000\
\000\000\000\000\028\000\028\000\000\000\005\000\005\000\028\000\
\000\000\028\000\000\000\000\000\005\000\000\000\028\000\000\000\
\000\000\000\000\000\000\028\000\000\000\000\000\000\000\000\000\
\028\000\028\000\028\000\005\000\000\000\000\000\000\000\000\000\
\005\000\000\000\005\000\000\000\000\000\005\000\000\000\005\000\
\005\000\003\000\004\000\005\000\006\000\000\000\000\000\007\000\
\008\000\009\000\010\000\011\000\000\000\012\000\000\000\000\000\
\000\000\000\000\014\000\015\000\016\000\017\000\018\000\000\000\
\000\000\000\000\019\000\000\000\000\000\000\000\000\000\000\000\
\000\000\020\000\000\000\000\000\021\000\000\000\022\000\000\000\
\000\000\000\000\000\000\023\000\033\000\025\000\003\000\004\000\
\005\000\006\000\000\000\000\000\007\000\008\000\009\000\010\000\
\011\000\000\000\012\000\000\000\000\000\000\000\000\000\014\000\
\015\000\016\000\017\000\018\000\000\000\000\000\000\000\019\000\
\028\000\028\000\000\000\000\000\000\000\000\000\020\000\000\000\
\000\000\021\000\000\000\022\000\000\000\000\000\000\000\000\000\
\023\000\048\000\025\000\028\000\028\000\000\000\000\000\000\000\
\028\000\000\000\028\000\000\000\000\000\000\000\028\000\028\000\
\028\000\000\000\000\000\000\000\028\000\000\000\000\000\000\000\
\000\000\028\000\028\000\028\000"

let yycheck = "\001\000\
\000\000\034\001\001\000\007\000\008\000\009\000\044\001\006\000\
\012\000\002\001\003\001\044\001\043\001\044\001\044\001\042\000\
\043\000\044\000\045\000\046\000\019\000\044\001\021\000\000\000\
\028\000\043\001\044\001\054\000\021\001\022\001\000\000\044\001\
\059\000\026\001\024\001\062\000\040\000\029\001\030\001\024\001\
\033\001\024\001\024\001\024\001\000\000\038\001\000\000\005\001\
\027\001\029\001\043\001\044\001\045\001\028\001\028\001\054\000\
\029\001\001\001\002\001\003\001\004\001\060\000\061\000\007\001\
\008\001\009\001\010\001\011\001\030\001\013\001\030\001\030\001\
\099\000\017\001\018\001\019\001\020\001\021\001\022\001\032\001\
\079\000\108\000\026\001\034\001\034\001\084\000\085\000\029\001\
\000\000\033\001\037\001\024\001\036\001\025\001\038\001\044\001\
\031\001\025\001\025\001\043\001\044\001\045\001\129\000\107\000\
\131\000\109\000\110\000\111\000\025\001\014\001\015\001\016\001\
\025\001\038\001\000\000\044\001\143\000\000\000\023\001\000\000\
\028\001\026\001\006\001\012\001\123\000\124\000\125\000\126\000\
\033\001\029\001\157\000\027\001\030\001\038\001\138\000\034\001\
\030\001\039\001\044\001\044\001\032\001\000\000\032\001\040\001\
\143\000\030\001\039\001\025\001\029\001\044\001\012\001\039\001\
\035\001\032\001\041\001\001\001\002\001\003\001\004\001\158\000\
\000\000\007\001\008\001\009\001\010\001\011\001\165\000\013\001\
\014\001\015\001\016\001\044\001\018\001\019\001\020\001\021\001\
\022\001\023\001\044\001\034\001\026\001\039\001\034\001\034\001\
\141\000\080\000\139\000\033\001\133\000\255\255\036\001\159\000\
\038\001\255\255\255\255\255\255\255\255\043\001\044\001\045\001\
\001\001\002\001\003\001\004\001\255\255\255\255\007\001\008\001\
\009\001\010\001\011\001\255\255\013\001\255\255\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\255\255\026\001\255\255\255\255\255\255\255\255\255\255\255\255\
\033\001\034\001\255\255\036\001\255\255\038\001\255\255\255\255\
\255\255\255\255\043\001\044\001\045\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\255\255\005\001\006\001\255\255\
\255\255\255\255\255\255\255\255\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\021\001\022\001\255\255\
\255\255\025\001\026\001\027\001\028\001\029\001\255\255\255\255\
\032\001\033\001\034\001\005\001\006\001\037\001\038\001\039\001\
\040\001\255\255\012\001\043\001\044\001\045\001\002\001\003\001\
\255\255\005\001\006\001\255\255\255\255\255\255\255\255\255\255\
\012\001\027\001\255\255\255\255\255\255\255\255\032\001\255\255\
\034\001\021\001\022\001\037\001\255\255\039\001\026\001\027\001\
\255\255\255\255\255\255\255\255\032\001\033\001\034\001\255\255\
\255\255\037\001\038\001\039\001\040\001\255\255\255\255\043\001\
\044\001\045\001\002\001\003\001\255\255\005\001\006\001\255\255\
\255\255\255\255\255\255\255\255\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\021\001\022\001\255\255\
\255\255\255\255\026\001\027\001\002\001\003\001\255\255\255\255\
\032\001\033\001\034\001\255\255\255\255\037\001\038\001\039\001\
\040\001\255\255\255\255\043\001\044\001\045\001\255\255\021\001\
\022\001\255\255\255\255\255\255\026\001\027\001\028\001\002\001\
\003\001\031\001\032\001\033\001\034\001\255\255\255\255\255\255\
\038\001\255\255\255\255\255\255\255\255\043\001\044\001\045\001\
\255\255\255\255\021\001\022\001\255\255\005\001\006\001\026\001\
\255\255\028\001\255\255\255\255\012\001\255\255\033\001\255\255\
\255\255\255\255\255\255\038\001\255\255\255\255\255\255\255\255\
\043\001\044\001\045\001\027\001\255\255\255\255\255\255\255\255\
\032\001\255\255\034\001\255\255\255\255\037\001\255\255\039\001\
\040\001\001\001\002\001\003\001\004\001\255\255\255\255\007\001\
\008\001\009\001\010\001\011\001\255\255\013\001\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\255\255\026\001\255\255\255\255\255\255\255\255\255\255\
\255\255\033\001\255\255\255\255\036\001\255\255\038\001\255\255\
\255\255\255\255\255\255\043\001\044\001\045\001\001\001\002\001\
\003\001\004\001\255\255\255\255\007\001\008\001\009\001\010\001\
\011\001\255\255\013\001\255\255\255\255\255\255\255\255\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\255\255\026\001\
\002\001\003\001\255\255\255\255\255\255\255\255\033\001\255\255\
\255\255\036\001\255\255\038\001\255\255\255\255\255\255\255\255\
\043\001\044\001\045\001\021\001\022\001\255\255\255\255\255\255\
\026\001\255\255\028\001\255\255\255\255\255\255\032\001\033\001\
\034\001\255\255\255\255\255\255\038\001\255\255\255\255\255\255\
\255\255\043\001\044\001\045\001"

let yynames_const = "\
  LAMBDA\000\
  TRUE\000\
  FALSE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  LET\000\
  LETREC\000\
  IN\000\
  CONCAT\000\
  BOOL\000\
  NAT\000\
  STRING\000\
  QUIT\000\
  HEAD\000\
  TAIL\000\
  ISNIL\000\
  CONS\000\
  NIL\000\
  LIST\000\
  LBRACKET\000\
  RBRACKET\000\
  LPAREN\000\
  RPAREN\000\
  DOT\000\
  EQ\000\
  COLON\000\
  ARROW\000\
  COMMA\000\
  LCBRACKET\000\
  RCBRACKET\000\
  AS\000\
  CASE\000\
  OF\000\
  LT\000\
  GT\000\
  BAR\000\
  EQGT\000\
  SEMICOLON\000\
  EOF\000\
  "

let yynames_block = "\
  INTV\000\
  IDV\000\
  STRINGV\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 64 "parser.mly"
      ( Bind (_1, _3) )
# 413 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 66 "parser.mly"
      ( BindType (_1, _3) )
# 421 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 68 "parser.mly"
      ( Eval _1 )
# 428 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
      ( Quit )
# 434 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'appTerm) in
    Obj.repr(
# 74 "parser.mly"
      ( _1 )
# 441 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 76 "parser.mly"
      ( TmIf (_2, _4, _6) )
# 450 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 78 "parser.mly"
      ( TmAbs (_2, _4, _6) )
# 459 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 80 "parser.mly"
      ( TmLetIn (_2, _4, _6) )
# 468 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 82 "parser.mly"
      ( TmLetIn (_2, TmFix (TmAbs (_2, _4, _6)), _8) )
# 478 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'case_list) in
    Obj.repr(
# 84 "parser.mly"
      ( TmCase (_2, _4) )
# 486 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'appTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 88 "parser.mly"
      ( TmApp (_1, _2) )
# 494 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 90 "parser.mly"
      ( TmSucc _2 )
# 501 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 92 "parser.mly"
      ( TmPred _2 )
# 508 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 94 "parser.mly"
      ( TmIsZero _2 )
# 515 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'atomicTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 96 "parser.mly"
      ( TmConcat (_2, _3) )
# 523 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 98 "parser.mly"
      ( TmHead (_3, _5) )
# 531 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 100 "parser.mly"
      ( TmTail (_3, _5) )
# 539 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 102 "parser.mly"
      ( TmIsNil (_3, _5) )
# 547 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proj) in
    Obj.repr(
# 104 "parser.mly"
      ( _1 )
# 554 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 106 "parser.mly"
      ( _1 )
# 561 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atomicTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 110 "parser.mly"
      ( TmProj (_1, _3) )
# 569 "parser.ml"
               : 'proj))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'proj) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 112 "parser.mly"
      ( TmProj (_1, _3) )
# 577 "parser.ml"
               : 'proj))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atomicTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 114 "parser.mly"
      ( TmRProj (_1, _3))
# 585 "parser.ml"
               : 'proj))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'proj) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 116 "parser.mly"
      ( TmRProj (_1, _3) )
# 593 "parser.ml"
               : 'proj))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 120 "parser.mly"
      ( _2 )
# 600 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 122 "parser.mly"
      ( TmTrue )
# 606 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 124 "parser.mly"
      ( TmFalse )
# 612 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 126 "parser.mly"
      ( TmVar _1 )
# 619 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 128 "parser.mly"
      ( let rec f = function
            0 -> TmZero
          | n -> TmSucc (f (n-1))
        in f _1 )
# 629 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 133 "parser.mly"
      ( TmString _1 )
# 636 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tuple) in
    Obj.repr(
# 135 "parser.mly"
      ( TmTuple(_2) )
# 643 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'listExpr) in
    Obj.repr(
# 137 "parser.mly"
      ( _1 )
# 650 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'record) in
    Obj.repr(
# 139 "parser.mly"
      ( TmRecord(_2) )
# 657 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 141 "parser.mly"
      ( TmTag (_2, _4, _7) )
# 666 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 145 "parser.mly"
      ( [_1] )
# 673 "parser.ml"
               : 'tuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tuple) in
    Obj.repr(
# 147 "parser.mly"
      ( _1 :: _3 )
# 681 "parser.ml"
               : 'tuple))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'atomicTerm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 151 "parser.mly"
        ( TmCons (_3, _5, _6) )
# 690 "parser.ml"
               : 'listExpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 153 "parser.mly"
        ( TmNil _3 )
# 697 "parser.ml"
               : 'listExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'case_branch) in
    Obj.repr(
# 157 "parser.mly"
      ( [_1] )
# 704 "parser.ml"
               : 'case_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'case_branch) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'case_list) in
    Obj.repr(
# 159 "parser.mly"
      ( _1 :: _3 )
# 712 "parser.ml"
               : 'case_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 163 "parser.mly"
      ( (_2, _4, _7) )
# 721 "parser.ml"
               : 'case_branch))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTy) in
    Obj.repr(
# 167 "parser.mly"
      ( _1 )
# 728 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atomicTy) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 169 "parser.mly"
      ( TyArr (_1, _3) )
# 736 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 173 "parser.mly"
      ( _2 )
# 743 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 175 "parser.mly"
      ( TyBool )
# 749 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 177 "parser.mly"
      ( TyNat )
# 755 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 179 "parser.mly"
      ( TyString )
# 761 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 181 "parser.mly"
      ( TyList _3 )
# 768 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'field_types) in
    Obj.repr(
# 183 "parser.mly"
      ( TyVariant _2 )
# 775 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 185 "parser.mly"
      ( TyVar _1 )
# 782 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 187 "parser.mly"
      ( TyRecord [] )
# 788 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ty_record_type_fields) in
    Obj.repr(
# 189 "parser.mly"
      ( TyRecord _2 )
# 795 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 193 "parser.mly"
     ([(_1,_3)])
# 803 "parser.ml"
               : 'record))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'record) in
    Obj.repr(
# 195 "parser.mly"
   ( [(_1, _3)] @ _5 )
# 812 "parser.ml"
               : 'record))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 199 "parser.mly"
      ( [(_1,_3)] )
# 820 "parser.ml"
               : 'ty_record_type_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'ty_record_type_fields) in
    Obj.repr(
# 201 "parser.mly"
      ( (_1,_3)::_5 )
# 829 "parser.ml"
               : 'ty_record_type_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field_type) in
    Obj.repr(
# 205 "parser.mly"
      ( [_1] )
# 836 "parser.ml"
               : 'field_types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_types) in
    Obj.repr(
# 207 "parser.mly"
      ( _1 :: _3 )
# 844 "parser.ml"
               : 'field_types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 211 "parser.mly"
      ( (_1, _3) )
# 852 "parser.ml"
               : 'field_type))
(* Entry s *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let s (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Lambda.command)
